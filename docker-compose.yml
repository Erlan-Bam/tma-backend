services:
  # Redis for Bull Queue management
  redis:
    image: redis:7-alpine
    container_name: tma-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - tma-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # TMA Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tma-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_started
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      FRONTEND_URL: ${FRONTEND_URL}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ZEPHYR_SECRET_KEY: ${ZEPHYR_SECRET_KEY}
      ZEPHYR_BASE_URL: ${ZEPHYR_BASE_URL}
      ZEPHYR_LICENSE_KEY: ${ZEPHYR_LICENSE_KEY}
      TRON_API_KEY: ${TRON_API_KEY}
      TRON_WALLET_ADDRESS: ${TRON_WALLET_ADDRESS}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - tma-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander for Queue Management (Development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: tma-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - tma-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tma-network:
    driver: bridge
