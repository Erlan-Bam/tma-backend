// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
}
enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}
enum CommissionType {
  FIXED
  PERCENTAGE
}
enum CommissionName {
  CARD_FEE
  TRANSACTION_FEE
}
enum BonusStatus {
  PENDING
  PROCESSING
  REJECTED
  COMPLETED
}

model Account {
  id                 String   @id @default(uuid())
  role               Role     @default(USER)
  telegramId         BigInt   @unique
  email              String   @unique
  password           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  childUserId        String   @unique
  isBanned           Boolean  @default(false)
  address            Json
  privateKey         String  @unique
  publicKey          String  @unique
  referredBy         String?

  transactions       Transaction[]
  referrer           Account?  @relation("Referrals", fields: [referredBy], references: [id])
  referrals          Account[] @relation("Referrals")
  bonuses            Bonus[]
}

model Transaction {
  id             String   @id @default(uuid())
  accountId      String
  amount         Float    @default(0)
  status         TransactionStatus
  tronId         String?  @unique
  zephyrId       String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  account        Account  @relation(fields: [accountId], references: [id])
}

model Bonus{
  id             String   @id @default(uuid())
  accountId      String
  amount         Float
  status         BonusStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  account        Account  @relation(fields: [accountId], references: [id])
}

model Commission {
  id             String   @id @default(uuid())
  name           CommissionName @unique
  rate           Float
  type           CommissionType
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}